---
layout: post
title:  "0.0.1 Notes"
date:   2014-07-26 22:30:00
categories: natureza elm
---

<div id="natureza0d0d1"></div>
<script src="/js/Natureza-build-0.0.1.js"></script>
<script>
	Elm.embed(Elm.Natureza0d0d1, document.getElementById('natureza0d0d1'));
</script>

So, my first bit of <code>Elm</code> is written! I'm starting to get a sense of how the language works.

So what has been accomplished, so far? Not much. Right now, I have a working grid system, and it should be easy to build enitities that render easily within this system thanks to this function I built:

	-- Some constants used in the math
	mapLen : Int
	mapLen = 5
	iOffset : Int
	iOffset = div mapLen 2
	imgSize : Int
	imgSize = 100

	atPos : (Int, Int) -> (Float, Float)
	atPos (x, y) = (toFloat((x-iOffset)*imgSize), toFloat((iOffset- y)*imgSize))
				
Building this function was a little more annoying than I hoped it'd be. I was hoping, honestly, for something a little closer to this:

	atPos : (Int, Int) -> (Float, Float)
	atPost (x, y) = (toFloat (x*imgSize), toFloat(y*imgSize))
	
But <code>Elm</code> does things oddly, in terms of how it handles its graphics (as compared to some other graphics stuff I used, like <code>SFML</code>). <code>collage x y forms</code>, for example, builds a 4 quadrant grid where +x is right, -x is left, +y is up, and -y is down. This is different than what I've encountered before, where there are no negative coordinates, +x is right, and +y is down. A tile system like the one I'm using is a lot more like a matrix than it is a coordinate system, so the classical method of representation suited me better (though I think this four quadrant way of doing graphics is silly). So I needed to negate y, and offset both by <code>div mapLen 2</code>.

With that set up, running around the array wasn't hard.

	drawMap : Array(Array Tile) -> [Form]
	drawMap tmap = let 
	    range = (toList (initialize mapLen (\n -> n)))
	    drawTile : Int -> Int -> Tile -> Form
	    drawTile x y t = move (atPos (x, y)) <| toForm <| image imgSize imgSize t.src
    
	    selectAndDrawTile : Int -> Int -> Form
	    selectAndDrawTile x y = drawTile x y <| getOrFail x <| getOrFail y tmap

	    drawRowOfTilesFromArray : Int -> [Form]
	    drawRowOfTilesFromArray x = map (selectAndDrawTile x) range
	  in
	   foldl (++) [] <| map drawRowOfTilesFromArray range
		 
Some nice functional style with <code>let</code>, the bottom line of code is essentially a flatten function, that calls a function that returns a list of the created <code>Form</code> objects in that row. The two iterative functions <code>drawRowOfTilesFromArray</code> and <code>selectAndDrawTile</code> map a function on a range to loop through the array. <code>drawTile</code> takes the indicies created by these maps, converts them into positions on the screen, and creates a <code>For</code> for it.

First impressions were less happy than I thought they'd be. I loved using a functional style to build this, but the 4-coordinate nature of the <code>Canvas</code> threw me in for a loop, and I spent more time figure that out than I would've liked. The syntax of the language is just also kinda of weird to work with, as a beginner, and I've mostly struggled with stuff like <code>log "myVaue" 1.0 / 2.0</code> spitting out 1 rather than 0.5. I get why it doesn't, but I'd just expect the division to have precedence. 

It's fine, though! I'm not at all discouraged, just a little annoyed at the amount of time I had to spend debugging some basic issues. Maybe this stuff is natural to Haskell people? I think I'm getting past a lot of the basic trip ups in the language, so I should get productive soon.

Next time, I add a <code>foldp</code> and some time into it! Make more, tinier squares! Have it dynamically react to window size! Maybe just one of the <code>Signal</code> based deals...but something!

See the project in all its current glory [here](https://github.com/MysteryMachine/mysterymachine.github.io/tree/natureza0n0n1/elm).

*Note: If you're an Elm guy and my struggles are all my fault, and you have a solution, please reach out! My struggles probably ARE all my fault.*